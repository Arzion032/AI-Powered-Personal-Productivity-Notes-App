[
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "Migrate",
        "importPath": "flask_migrate",
        "description": "flask_migrate",
        "isExtraImport": true,
        "detail": "flask_migrate",
        "documentation": {}
    },
    {
        "label": "LoginManager",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "UserMixin",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "logout_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_manager",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "generate_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "check_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "Friend",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "stringify",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "Flask-end.migrations.versions.a4dc7cc7e261_waalahi",
        "description": "Flask-end.migrations.versions.a4dc7cc7e261_waalahi",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('user',\n    sa.Column('user_id', sa.Integer(), nullable=False),\n    sa.Column('username', sa.String(length=100), nullable=False),\n    sa.Column('password', sa.String(length=100), nullable=False),\n    sa.Column('email', sa.String(length=100), nullable=False),\n    sa.PrimaryKeyConstraint('user_id'),\n    sa.UniqueConstraint('email')\n    )",
        "detail": "Flask-end.migrations.versions.a4dc7cc7e261_waalahi",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "Flask-end.migrations.versions.a4dc7cc7e261_waalahi",
        "description": "Flask-end.migrations.versions.a4dc7cc7e261_waalahi",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('friend')\n    op.drop_table('user')\n    # ### end Alembic commands ###",
        "detail": "Flask-end.migrations.versions.a4dc7cc7e261_waalahi",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "Flask-end.migrations.versions.a4dc7cc7e261_waalahi",
        "description": "Flask-end.migrations.versions.a4dc7cc7e261_waalahi",
        "peekOfCode": "revision = 'a4dc7cc7e261'\ndown_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('user',\n    sa.Column('user_id', sa.Integer(), nullable=False),\n    sa.Column('username', sa.String(length=100), nullable=False),\n    sa.Column('password', sa.String(length=100), nullable=False),",
        "detail": "Flask-end.migrations.versions.a4dc7cc7e261_waalahi",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "Flask-end.migrations.versions.a4dc7cc7e261_waalahi",
        "description": "Flask-end.migrations.versions.a4dc7cc7e261_waalahi",
        "peekOfCode": "down_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('user',\n    sa.Column('user_id', sa.Integer(), nullable=False),\n    sa.Column('username', sa.String(length=100), nullable=False),\n    sa.Column('password', sa.String(length=100), nullable=False),\n    sa.Column('email', sa.String(length=100), nullable=False),",
        "detail": "Flask-end.migrations.versions.a4dc7cc7e261_waalahi",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "Flask-end.migrations.versions.a4dc7cc7e261_waalahi",
        "description": "Flask-end.migrations.versions.a4dc7cc7e261_waalahi",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('user',\n    sa.Column('user_id', sa.Integer(), nullable=False),\n    sa.Column('username', sa.String(length=100), nullable=False),\n    sa.Column('password', sa.String(length=100), nullable=False),\n    sa.Column('email', sa.String(length=100), nullable=False),\n    sa.PrimaryKeyConstraint('user_id'),",
        "detail": "Flask-end.migrations.versions.a4dc7cc7e261_waalahi",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "Flask-end.migrations.versions.a4dc7cc7e261_waalahi",
        "description": "Flask-end.migrations.versions.a4dc7cc7e261_waalahi",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('user',\n    sa.Column('user_id', sa.Integer(), nullable=False),\n    sa.Column('username', sa.String(length=100), nullable=False),\n    sa.Column('password', sa.String(length=100), nullable=False),\n    sa.Column('email', sa.String(length=100), nullable=False),\n    sa.PrimaryKeyConstraint('user_id'),\n    sa.UniqueConstraint('email')",
        "detail": "Flask-end.migrations.versions.a4dc7cc7e261_waalahi",
        "documentation": {}
    },
    {
        "label": "get_engine",
        "kind": 2,
        "importPath": "Flask-end.migrations.env",
        "description": "Flask-end.migrations.env",
        "peekOfCode": "def get_engine():\n    try:\n        # this works with Flask-SQLAlchemy<3 and Alchemical\n        return current_app.extensions['migrate'].db.get_engine()\n    except (TypeError, AttributeError):\n        # this works with Flask-SQLAlchemy>=3\n        return current_app.extensions['migrate'].db.engine\ndef get_engine_url():\n    try:\n        return get_engine().url.render_as_string(hide_password=False).replace(",
        "detail": "Flask-end.migrations.env",
        "documentation": {}
    },
    {
        "label": "get_engine_url",
        "kind": 2,
        "importPath": "Flask-end.migrations.env",
        "description": "Flask-end.migrations.env",
        "peekOfCode": "def get_engine_url():\n    try:\n        return get_engine().url.render_as_string(hide_password=False).replace(\n            '%', '%%')\n    except AttributeError:\n        return str(get_engine().url).replace('%', '%%')\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata",
        "detail": "Flask-end.migrations.env",
        "documentation": {}
    },
    {
        "label": "get_metadata",
        "kind": 2,
        "importPath": "Flask-end.migrations.env",
        "description": "Flask-end.migrations.env",
        "peekOfCode": "def get_metadata():\n    if hasattr(target_db, 'metadatas'):\n        return target_db.metadatas[None]\n    return target_db.metadata\ndef run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.",
        "detail": "Flask-end.migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "Flask-end.migrations.env",
        "description": "Flask-end.migrations.env",
        "peekOfCode": "def run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "Flask-end.migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "Flask-end.migrations.env",
        "description": "Flask-end.migrations.env",
        "peekOfCode": "def run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    # this callback is used to prevent an auto-migration from being generated\n    # when there are no changes to the schema\n    # reference: http://alembic.zzzcomputing.com/en/latest/cookbook.html\n    def process_revision_directives(context, revision, directives):\n        if getattr(config.cmd_opts, 'autogenerate', False):",
        "detail": "Flask-end.migrations.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "Flask-end.migrations.env",
        "description": "Flask-end.migrations.env",
        "peekOfCode": "config = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nfileConfig(config.config_file_name)\nlogger = logging.getLogger('alembic.env')\ndef get_engine():\n    try:\n        # this works with Flask-SQLAlchemy<3 and Alchemical\n        return current_app.extensions['migrate'].db.get_engine()\n    except (TypeError, AttributeError):",
        "detail": "Flask-end.migrations.env",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "Flask-end.migrations.env",
        "description": "Flask-end.migrations.env",
        "peekOfCode": "logger = logging.getLogger('alembic.env')\ndef get_engine():\n    try:\n        # this works with Flask-SQLAlchemy<3 and Alchemical\n        return current_app.extensions['migrate'].db.get_engine()\n    except (TypeError, AttributeError):\n        # this works with Flask-SQLAlchemy>=3\n        return current_app.extensions['migrate'].db.engine\ndef get_engine_url():\n    try:",
        "detail": "Flask-end.migrations.env",
        "documentation": {}
    },
    {
        "label": "target_db",
        "kind": 5,
        "importPath": "Flask-end.migrations.env",
        "description": "Flask-end.migrations.env",
        "peekOfCode": "target_db = current_app.extensions['migrate'].db\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef get_metadata():\n    if hasattr(target_db, 'metadatas'):\n        return target_db.metadatas[None]\n    return target_db.metadata\ndef run_migrations_offline():",
        "detail": "Flask-end.migrations.env",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Flask-end.app",
        "description": "Flask-end.app",
        "peekOfCode": "app = Flask(__name__)\napp.secret_key = 'sekrit_key'\nCORS(app, supports_credentials=True)\napp.config['SQLALCHEMY_DATABASE_URI'] = \"sqlite:///friends.db\"\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\nmigrate = Migrate(app, db) \n# Create login manager before app context\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)",
        "detail": "Flask-end.app",
        "documentation": {}
    },
    {
        "label": "app.secret_key",
        "kind": 5,
        "importPath": "Flask-end.app",
        "description": "Flask-end.app",
        "peekOfCode": "app.secret_key = 'sekrit_key'\nCORS(app, supports_credentials=True)\napp.config['SQLALCHEMY_DATABASE_URI'] = \"sqlite:///friends.db\"\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\nmigrate = Migrate(app, db) \n# Create login manager before app context\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nwith app.app_context():",
        "detail": "Flask-end.app",
        "documentation": {}
    },
    {
        "label": "app.config['SQLALCHEMY_DATABASE_URI']",
        "kind": 5,
        "importPath": "Flask-end.app",
        "description": "Flask-end.app",
        "peekOfCode": "app.config['SQLALCHEMY_DATABASE_URI'] = \"sqlite:///friends.db\"\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\nmigrate = Migrate(app, db) \n# Create login manager before app context\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nwith app.app_context():\n    from models import User\n    import routes",
        "detail": "Flask-end.app",
        "documentation": {}
    },
    {
        "label": "app.config['SQLALCHEMY_TRACK_MODIFICATIONS']",
        "kind": 5,
        "importPath": "Flask-end.app",
        "description": "Flask-end.app",
        "peekOfCode": "app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\nmigrate = Migrate(app, db) \n# Create login manager before app context\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nwith app.app_context():\n    from models import User\n    import routes\n    @login_manager.user_loader",
        "detail": "Flask-end.app",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "Flask-end.app",
        "description": "Flask-end.app",
        "peekOfCode": "db = SQLAlchemy(app)\nmigrate = Migrate(app, db) \n# Create login manager before app context\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nwith app.app_context():\n    from models import User\n    import routes\n    @login_manager.user_loader\n    def load_user(user_id):",
        "detail": "Flask-end.app",
        "documentation": {}
    },
    {
        "label": "migrate",
        "kind": 5,
        "importPath": "Flask-end.app",
        "description": "Flask-end.app",
        "peekOfCode": "migrate = Migrate(app, db) \n# Create login manager before app context\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nwith app.app_context():\n    from models import User\n    import routes\n    @login_manager.user_loader\n    def load_user(user_id):\n        return User.query.get(int(user_id))",
        "detail": "Flask-end.app",
        "documentation": {}
    },
    {
        "label": "login_manager",
        "kind": 5,
        "importPath": "Flask-end.app",
        "description": "Flask-end.app",
        "peekOfCode": "login_manager = LoginManager()\nlogin_manager.init_app(app)\nwith app.app_context():\n    from models import User\n    import routes\n    @login_manager.user_loader\n    def load_user(user_id):\n        return User.query.get(int(user_id))\n    @login_manager.unauthorized_handler\n    def unauthorized_callback():",
        "detail": "Flask-end.app",
        "documentation": {}
    },
    {
        "label": "Friend",
        "kind": 6,
        "importPath": "Flask-end.models",
        "description": "Flask-end.models",
        "peekOfCode": "class Friend(db.Model):\n    id= db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable = False)\n    role = db.Column(db.String(50), nullable = False)\n    description = db.Column(db.Text, nullable=False)\n    gender = db.Column(db.String(10), nullable=False)\n    img_url = db.Column(db.String(200), nullable=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.user_id'), nullable=False)\n    def to_json(self):\n        return {",
        "detail": "Flask-end.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "Flask-end.models",
        "description": "Flask-end.models",
        "peekOfCode": "class User(db.Model, UserMixin):\n    user_id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(100), nullable=False)\n    password = db.Column(db.String(100), nullable=False)\n    email = db.Column(db.String(100), unique=True, nullable=False)\n    friends = db.relationship(\"Friend\", backref='user', lazy= True)\n    def set_password(self, password):\n        self.password = generate_password_hash(password)\n    def get_id(self):\n        return str(self.user_id)",
        "detail": "Flask-end.models",
        "documentation": {}
    },
    {
        "label": "get_friends",
        "kind": 2,
        "importPath": "Flask-end.routes",
        "description": "Flask-end.routes",
        "peekOfCode": "def get_friends():\n    # Get all the friends from the database\n    friends = Friend.query.filter_by(user_id=current_user.user_id).all()\n    result = [friend.to_json() for friend in friends]\n    return  jsonify(result)\n#Create a friend\n@app.route(\"/api/friends\", methods=[\"POST\"])\n@login_required\ndef create_friend():\n    #Add new friend to the database",
        "detail": "Flask-end.routes",
        "documentation": {}
    },
    {
        "label": "create_friend",
        "kind": 2,
        "importPath": "Flask-end.routes",
        "description": "Flask-end.routes",
        "peekOfCode": "def create_friend():\n    #Add new friend to the database\n    try:\n        try:\n            data = request.json\n            name = data.get(\"name\")\n            role = data.get(\"role\")\n            description = data.get(\"description\")\n            gender = data.get(\"gender\")\n            user_id = current_user.user_id",
        "detail": "Flask-end.routes",
        "documentation": {}
    },
    {
        "label": "delete_friend",
        "kind": 2,
        "importPath": "Flask-end.routes",
        "description": "Flask-end.routes",
        "peekOfCode": "def delete_friend(id):\n    try:\n        friend = Friend.query.get(id)\n        #If id exist in the database, delete it\n        if not friend or friend.user_id != current_user.user_id:\n            return jsonify({\"error\":\"Friend not found or not authorized\"}),404\n        db.session.delete(friend)\n        db.session.commit()\n        return jsonify({\"msg\":\"Friend deleted successfully\"}),200\n    except Exception as e:",
        "detail": "Flask-end.routes",
        "documentation": {}
    },
    {
        "label": "update_friend",
        "kind": 2,
        "importPath": "Flask-end.routes",
        "description": "Flask-end.routes",
        "peekOfCode": "def update_friend(id):\n    data = request.json\n    friend = Friend.query.get(id)\n    #Check if id exist in the database\n    #If not return error message\n    if not friend:\n        return jsonify({\"Error\":\"Wala na siya\"}),400\n    #If yes update the information about that friend\n    friend.name = data.get(\"name\",friend.name)\n    friend.role = data.get(\"role\",friend.role)",
        "detail": "Flask-end.routes",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "Flask-end.routes",
        "description": "Flask-end.routes",
        "peekOfCode": "def register():\n    data = request.json\n    username = data.get('username')\n    password = data.get('password')\n    email = data.get('email')\n    required_fields = {\"username\": username, \"password\": password, \"email\": email}\n    for key, value in required_fields.items():\n        if not value:\n            return jsonify({\"error\": f\"Missing or empty required field: {key}\"}), 400\n    existing_user = User.query.filter_by(email=email).first()",
        "detail": "Flask-end.routes",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "Flask-end.routes",
        "description": "Flask-end.routes",
        "peekOfCode": "def login():\n    try:\n        if request.method == 'GET':\n        # Handle the redirect from @login_required\n            return jsonify({\"error\": \"Authentication required\"}), 401\n        try:\n            data =request.get_json()\n            email = data.get('email')\n            password = data.get('password')\n        except Exception as e:",
        "detail": "Flask-end.routes",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "Flask-end.routes",
        "description": "Flask-end.routes",
        "peekOfCode": "def logout():\n    try:\n        logout_user()\n        session.clear()\n        return jsonify({\"Message\": \"Logout successfully\"}) \n    except Exception as e:\n        return jsonify({\"error\": str(e)}),400\n@app.route('/api/current_user', methods=['GET'])\n@login_required\ndef get_current_user():",
        "detail": "Flask-end.routes",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "kind": 2,
        "importPath": "Flask-end.routes",
        "description": "Flask-end.routes",
        "peekOfCode": "def get_current_user():\n    return jsonify({\n        \"user_id\": current_user.user_id,  # or another unique identifier\n        \"username\": current_user.username\n    })",
        "detail": "Flask-end.routes",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "React-end.node_modules.flatted.python.flatted",
        "description": "React-end.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "React-end.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "React-end.node_modules.flatted.python.flatted",
        "description": "React-end.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "React-end.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "React-end.node_modules.flatted.python.flatted",
        "description": "React-end.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "React-end.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "React-end.node_modules.flatted.python.flatted",
        "description": "React-end.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "React-end.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "React-end.node_modules.flatted.python.test",
        "description": "React-end.node_modules.flatted.python.test",
        "peekOfCode": "def stringify(value):\n    return _stringify(value, separators=(',', ':'))\nassert stringify([None, None]) == '[[null,null]]'\na = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'",
        "detail": "React-end.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "React-end.node_modules.flatted.python.test",
        "description": "React-end.node_modules.flatted.python.test",
        "peekOfCode": "a = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b",
        "detail": "React-end.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "React-end.node_modules.flatted.python.test",
        "description": "React-end.node_modules.flatted.python.test",
        "peekOfCode": "o = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)",
        "detail": "React-end.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['o']",
        "kind": 5,
        "importPath": "React-end.node_modules.flatted.python.test",
        "description": "React-end.node_modules.flatted.python.test",
        "peekOfCode": "o['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'",
        "detail": "React-end.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "React-end.node_modules.flatted.python.test",
        "description": "React-end.node_modules.flatted.python.test",
        "peekOfCode": "b = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'",
        "detail": "React-end.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['one']",
        "kind": 5,
        "importPath": "React-end.node_modules.flatted.python.test",
        "description": "React-end.node_modules.flatted.python.test",
        "peekOfCode": "o['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})",
        "detail": "React-end.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['two']",
        "kind": 5,
        "importPath": "React-end.node_modules.flatted.python.test",
        "description": "React-end.node_modules.flatted.python.test",
        "peekOfCode": "o['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])",
        "detail": "React-end.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['three']",
        "kind": 5,
        "importPath": "React-end.node_modules.flatted.python.test",
        "description": "React-end.node_modules.flatted.python.test",
        "peekOfCode": "o['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}",
        "detail": "React-end.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['a']",
        "kind": 5,
        "importPath": "React-end.node_modules.flatted.python.test",
        "description": "React-end.node_modules.flatted.python.test",
        "peekOfCode": "o['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));",
        "detail": "React-end.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['test']",
        "kind": 5,
        "importPath": "React-end.node_modules.flatted.python.test",
        "description": "React-end.node_modules.flatted.python.test",
        "peekOfCode": "o['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']",
        "detail": "React-end.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['array']",
        "kind": 5,
        "importPath": "React-end.node_modules.flatted.python.test",
        "description": "React-end.node_modules.flatted.python.test",
        "peekOfCode": "o['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')",
        "detail": "React-end.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "React-end.node_modules.flatted.python.test",
        "description": "React-end.node_modules.flatted.python.test",
        "peekOfCode": "a2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']",
        "detail": "React-end.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o2",
        "kind": 5,
        "importPath": "React-end.node_modules.flatted.python.test",
        "description": "React-end.node_modules.flatted.python.test",
        "peekOfCode": "o2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "React-end.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "React-end.node_modules.flatted.python.test",
        "description": "React-end.node_modules.flatted.python.test",
        "peekOfCode": "str = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "React-end.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "oo",
        "kind": 5,
        "importPath": "React-end.node_modules.flatted.python.test",
        "description": "React-end.node_modules.flatted.python.test",
        "peekOfCode": "oo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "React-end.node_modules.flatted.python.test",
        "documentation": {}
    }
]